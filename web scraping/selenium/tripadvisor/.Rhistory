break
} else if (y == 7) {
cat("Loss")
break
}}
}
x = sum(sample(1:6,2, replace = T))
if (x == 7 | x == 11) {cat("Win")
} else if (x == 2 | x == 3 | x == 12) {cat("Loss")
} else {
while (TRUE) {
y = sum(sample(1:6), 2, replace = T)
if (y == x) {
cat ("Win")
break
} else if (y == 7) {
cat("Loss")
break
}}
}
x = sum(sample(1:6,2, replace = T))
if (x == 7 | x == 11) {cat("Win")
} else if (x == 2 | x == 3 | x == 12) {cat("Loss")
} else {
while (TRUE) {
y = sum(sample(1:6), 2, replace = T)
if (y == x) {
cat ("Win")
break
} else if (y == 7) {
cat("Loss")
break
}}
}
x = sum(sample(1:6,2, replace = T))
if (x == 7 | x == 11) {cat("Win")
} else if (x == 2 | x == 3 | x == 12) {cat("Loss")
} else { y = sum(sample(1:6),x, replace = T)
while (TRUE) {
if (y == x) {
cat ("Win")
break
} else if (y == 7) {
cat("Loss")
break
}}
}
?sample
data("iris")
head(iris)
library(dplyr)
group_by(iris,Sepal.Length,Species)
summarise(group_by(iris,Sepal.Length,Species),addbitches=sum(Petal.Width))
install.packages('shiny')
shiny::runApp('Desktop/ningxi')
runApp('Desktop/demo/ui.R')
runApp('Desktop/demo/ui.R')
runApp('Desktop/demo/ui.R')
runApp('Desktop/demo1')
runApp('Desktop/demo1')
runApp('Desktop/demo1')
runApp('Desktop/demo1')
?hist
data("faithful")
head(faithful)
runApp('Desktop/demo1')
runApp('Documents/DSA/lecture notes/R/flights/flights')
runApp('Documents/DSA/lecture notes/R/flights/flights')
runApp('Documents/DSA/lecture notes/R/flights')
runApp('Documents/DSA/lecture notes/R/flights')
runApp('Documents/DSA/lecture notes/R/flights')
runApp('Documents/DSA/lecture notes/R/flights')
runApp('Documents/DSA/lecture notes/R/flights')
runApp('Documents/DSA/lecture notes/R/flights')
runApp('Documents/DSA/lecture notes/R/flights')
runApp('Documents/DSA/lecture notes/R/flights')
head(flights)
runApp('Documents/DSA/lecture notes/R/flights')
runApp('Documents/DSA/lecture notes/R/flights')
runApp('Documents/DSA/lecture notes/R/flights')
runApp('Documents/DSA/lecture notes/R/flights')
?unique
runApp('Documents/DSA/lecture notes/R/flights')
shiny::runApp('Documents/DSA/lecture notes/R/flights')
class(flights)
class(flights[origin])
class(flights[,origin])
flights(1,2)
flights[1,2]
flights[1,32]
flights[1,13]
?unique
class(unique(flights[,origin]))
unique(flights[,origin]))
unique(flights[,origin])
flights[,origin]
runApp('Documents/DSA/lecture notes/R/flights')
shiny::runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
?geom_col
?scale_color_gradient
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
View(wine)
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
top=wine %>% group_by(country) %>% summarize(median=median(points)) %>% arrange(desc(median)) %>% top_n(21)
top=as.character(top$country)
toptopwineprice=wine %>% filter(variety %in% topwine) %>% group_by(variety)%>% summarize(median=median(points))
top
goodvalue = top[! %in% selected_countries]
goodvalue = top[%in% selected_countries]
goodvalue = setdiff(top, selected_countries)
goodvalue
goodvalue = setdiff(top, selected_countries,na.rm=TRUE)
goodvalue = goodvalue[ !is.na(goodvalue)]
goodvalue
goodvalue = setdiff(top, selected_countries)
is.na(goodvalue)
goodvalue = goodvalue[ != '']
goodvalue = goodvalue[goodvalue != '']
goodvalue
goodvalue = setdiff(top, selected_countries)
goodvalue = goodvalue[goodvalue != '']
runApp('Documents/DSA/projects/shiny wine')
wine %>% arrange(desc(points))
str(wine)
?quantile
wine %>% arrange(desc(points)) % quantile(prob = 0.9)
wine %>% arrange(desc(points)) % filter(points == quantile(prob = 0.9))
wine %>% arrange(desc(points)) % filter(points > quantile(points, prob = 0.9))
quantile(wine$points, prob = 0.9)
class(quantile(wine$points, prob = 0.9))
wine %>% arrange(desc(points)) %>% filter(points > quantile(points, prob = 0.9))
nrow(wine)
cheapest10percent=wine %>% arrange(price) %>% filter(price > quantile(price, prob = 0.1))
cheapest10percent=wine %>% arrange(price) %>% filter(price > quantile(price, prob = 0.1, na.rm= T))
nrow(top10percent)
top10percent=wine %>% arrange(desc(points)) %>% filter(points > quantile(points, prob = 0.9))
nrow(top10percent)
nrow(cheapest10percent)
cheapest10percent=wine %>% arrange(price) %>% filter(price > quantile(price, prob = 0.1, na.rm= T)) %>% top_n(nrow(top10percent))
cheapest10percent=wine %>% arrange(price) %>% filter(price > quantile(price, prob = 0.1, na.rm= T)) %>% top_n(10)
cheapest10percent=wine %>% arrange(price) %>% filter(price > quantile(price, prob = 0.1, na.rm= T))
head(cheapest10percent)
str(cheapest10percent)
cheapest10percent=wine %>% arrange(price) %>% filter(price > quantile(price, prob = 0.1, na.rm= T)) %>% top_n(5)
?top_n
cheapest10percent=wine %>% arrange(price) %>% filter(price > quantile(price, prob = 0.1, na.rm= T)) %>% top_n(5,wt=price)
cheapest10percent=wine %>% arrange(price) %>% filter(price > quantile(price, prob = 0.1, na.rm= T)) %>% top_n(nrow(top10percent),wt=price)
nrow(cheapest10percent)
nrow(top10percent)
cheapest10percent=wine %>% arrange(price) %>% filter(price > quantile(price, prob = 0.1, na.rm= T)) %>% top_n(nrow(top10percent),wt=price) %>% filter(nrow(top10percent))
wine %>% group_by(country) %>% summarise(count=n())
cheapest10percent=wine %>% arrange(price) %>% head(nrow(top10percent))
nrow(cheapest10percent)
nrow(top10percent)
goodvalue = intersect(top10percent,cheapest10percent)
goodvalue
top10percent=wine %>% arrange(desc(points)) %>% filter(points > quantile(points, prob = 0.80))
goodvalue
top10percent=wine %>% arrange(desc(points)) %>% filter(points > quantile(points, prob = 0.50))
goodvalue
nrow(cheapest10percent)
nrow(top10percent)
cheapest10percent=wine %>% arrange(price) %>% head(nrow(top10percent))
nrow(cheapest10percent)
nrow(top10percent)
goodvalue = intersect(top10percent,cheapest10percent)
goodvalue
top10percent=wine %>% arrange(desc(points)) %>% filter(points > quantile(points, prob = 0.80))
top10percent=wine %>% arrange(desc(points)) %>% filter(points > quantile(points, prob = 0.80))
goodvalue
top10percent=wine %>% arrange(desc(points)) %>% filter(points > quantile(points, prob = 0.90))
cheapest10percent=wine %>% arrange(price) %>% head(nrow(top10percent))
goodvalue = intersect(top10percent,cheapest10percent)
goodvalue
top10percent=wine %>% arrange(desc(points)) %>% filter(points > quantile(points, prob = 0.85))
cheapest10percent=wine %>% arrange(price) %>% head(nrow(top10percent))
goodvalue
goodvalue = intersect(top10percent,cheapest10percent)
nrow(top10percent)
nrow(cheapest10percent)
goodvalue = intersect(top10percent,cheapest10percent)
goodvalue
library(datasets)
head(HairEyeColor)
mosaicplot(HairEyeColor, shade = TRUE)
View(HairEyeColor)
class(HairEyeColor)
?mosaicplot
library(data.table)
datasets::HairEyeColor
class(HairEyeColor)
head(HairEyeColor)
library(dplyr)
HairEyeColor %>% filter(Sex=='Female')
str(HairEyeColor)
trimmed = HairEyeColor[,c('Brown','Blue'),'Female']
mosaicplot(trimmed,shade=T)
install.packages('MLR')
install.packages('mlr')
?mlr
library(mlr)
View(trimmed)
chisq.test(trimmed)
chisq.test(trimmed)$expected
shiny::runApp('Documents/DSA/projects/shiny wine')
goodvalue
str(goodvalue)
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
str(topwine)
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
?geom_col
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
topwine = wine %>% group_by(variety) %>% summarize(number=n()) %>% arrange(desc(number)) %>% top_n(12)
wine %>% filter(country == input$country) %>% group_by(province) %>% summarise(nprovince=n(),midpoint=median(points)) %>%
arrange(desc(nprovince)) %>% top_n(n=5,wt=nprovince)
wine %>% filter(country == input$country) %>% filter(variety %in% topwine)
topwine
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
shiny::runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
runApp('Documents/DSA/projects/shiny wine')
shiny::runApp('Documents/DSA/projects/shiny_wine')
runApp('Documents/DSA/projects/shiny_wine')
runApp('Documents/DSA/projects/shiny_wine')
45*12
3900*14/30
shiny::runApp('Documents/DSA/projects/shiny_wine')
nrow(wine)
shiny::runApp('Documents/DSA/projects/shiny_wine')
getwd
library(Hmisc) #Load the Harrell miscellaneous library.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
imputed.x2
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
library(PASWR)
install.packages('PASWR')
library(PASWR)
data("titanic3")
str(titanic3)
aggr(titanic3)
library(VIM) #For the visualization and imputation of missing values.
aggr(titanic3)
md.pattern(titanic3)
library(mice) #Load the multivariate imputation by chained equations library.
md.pattern(titanic3)
?md.pattern
?complete.cases
complete.cases(titanic3)
str(complete.cases(titanic3))
length(titanic[complete.cases(titanic3)==TRUE])
length(titanic3[complete.cases(titanic3)==TRUE])
str(complete.cases(titanic3))
summary(complete.cases(titanic3))
pre = preProcess(titanic3, method = "meanImpute") # defining an object to process imputation
library(VIM)
library(caret)
library(Hmisc)
pre = preProcess(titanic3, method = "meanImpute") # defining an object to process imputation
titanic3.age = impute(titanic3$age, mean)
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
imputed.x2
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
titanic3$age = impute(titanic3$age, mean)
titanic3$age
titanic3age = impute(titanic3$age, mean)
titanic3age
library(Hmisc) #Load the Harrell miscellaneous library.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
imputed.x2
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
imputed.x2 = impute(missing.data$x2, "random") #Simple random imputation using the
imputed.x2
library(VIM) #For the visualization and imputation of missing values.
library(mice) #Load the multivariate imputation by chained equations library.
library(caret)
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
missing.data
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
imputed.x2 = impute(missing.data$x2, 'mean') #Specifically calling the x2 variable.
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
?impute
library(Hmisc) #Load the Harrell miscellaneous library.
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
impute(titanic3$age,mean)
titanic3age
titanic3age = impute(titanic3$age, mean) # why didn't this work? It follows the same syntax as lecture code
titanic3age
plot(titanic3$age)
head(titanic3)
titanic3age = impute(titanic3$age) # why didn't this work? It follows the same syntax as lecture code
titanic3age = impute(titanic3$age,mean) # why didn't this work? It follows the same syntax as lecture code
impute(titanic3$age,'random')
impute(titanic3$age,fun='random') # got an error message even though lecture code worked? Error in match.arg(what) : 'arg' should be one of “median”, “mean”
impute(titanic3$age,'random') # got an error message even though lecture code worked? Error in match.arg(what) : 'arg' should be one of “median”, “mean”
impute(titanic3$fare,'random')
impute(titanic3$fare,'median')
impute(titanic3$fare,median)
impute(titanic3$fare,'random')
imputedfare=impute(titanic3$fare,'random') # same problem
imputedfare=impute(titanic3$fare,mean) # same problem
Hmisc::impute()
Hmisc::impute(titanic3$age,mean)
?impute
titanic3age = Hmisc::impute(titanic3$age,mean) # why didn't this work? It follows the same syntax as lecture code
titanic3$age = Hmisc::impute(titanic3$age,mean) # why didn't this work? It follows the same syntax as lecture code
plot(titanic3$age)
titanic3$fare=Hmisc::impute(titanic3$age,'random') # got an error message even though lecture code worked? Error in match.arg(what) : 'arg' should be one of “median”, “mean”
titanic3$age=Hmisc::impute(titanic3$age,'random') # got an error message even though lecture code worked? Error in match.arg(what) : 'arg' should be one of “median”, “mean”
impute(titanic3$fare,'random') # same problem
titanic3$age=Hmisc::impute(titanic3$age,'random')
plot(titanic3$age)
titanic3$age=Hmisc::impute(titanic3$age,'random')
plot(titanic3$age)
titanic3$age
data(titanic3)
md.pattern(titanic3)
titanic3$age=Hmisc::impute(titanic3$age,'random')
plot(titanic3$age)
Hmisc::impute(titanic3$fare,'random') # same problem
imputedfare=Hmisc::impute(titanic3$fare,'random')
plot(imputedfare~titanic3$age)
plot(imputedfare~titanic3$age)
plot(imputedfare~titanic3$age,color=pclass)
plot(imputedfare~titanic3$age,color=titanic3$pclass)
titanic3$fare=imputed fare
titanic3$fare=imputedfare
ggplot(titanic3,aes(fare,age,color=pclass))
ggplot(titanic3,aes(fare,age,color=pclass))+geom_point()
ggplot(titanic3,aes(age, fare,color=pclass))+geom_point()
newpoints = data.frame(newfare=c(400,100),age=c(50,10))
ggplot(titanic3,aes(age, fare,color=pclass))+geom_point()+geom_point(newpoints,aes(age,newfare,color=pclass))
library(VIM)
library(mice)
library(caret)
library(Hmisc)
data("titanic3")
library(PASWR)
library(PASWR)
data("titanic3")
library(VIM)
library(mice)
library(caret)
library(Hmisc)
titanic3$age = Hmisc::impute(titanic3$age,mean)
newpoints = data.frame(newfare=c(400,100),age=c(50,10))
concatgraph = titanic3+newpoints
imputedfare=Hmisc::impute(titanic3$fare,'random')
selected= titanic3%>% select(age, fare)
library(dplyr)
selected= titanic3%>% select(age, fare)
concatgraph = selected+newpoints
newpoints = data.frame(fare=c(400,100),age=c(50,10))
concatgraph = selected+newpoints
selected
newpoints
selected= titanic3%>% select(fare, age)
concatgraph = selected+newpoints
concatgraph = rbind(selected,newpoints)
nrow(selected)
nrow(concatgraph)
ggplot(titanic3,aes(age, fare,color=pclass))+geom_point()
ggplot(concatgraph,aes(age, fare,color=pclass))+geom_point()
ggplot(concatgraph,aes(age, fare))+geom_point()
rbind(titanic3,newpoints)
rbind(titanic3,newpoints,na.omit=T)
rbind(titanic3,newpoints,fill=TRUE)
library(data.table)
data.table::rbind(titanic3,newpoints,fill=TRUE)
rbind(titanic3,newpoints,fill=TRUE)
titanic3=as.data.table(titanic3)
newpoints=as.data.table(newpoints)
rbind(titanic3,newpoints,fill=TRUE)
newtitanic=rbind(titanic3,newpoints,fill=TRUE)
kNN(newtitanic, 1)
newtitanic=rbind(titanic3,newpoints,fill=TRUE)
'''''.
''
''
''''''''''''''''
'''''''''''''''''''''
newtitanic=as.data.frame(newtitanic)
kNN(newtitanic, 1)
str(newtitanic)
newtitanic=rbind(titanic3,newpoints,fill=TRUE)
str(newtitanic)
names(newtitanic)
kNN(newtitanic, 1)
kNN(newtitanic$pclass, 1)
library(VIM)
kNN(newtitanic, 1)
md.pattern
md.pattern(newtitanic)
tail(newtitanic)
tail(newtitanic)
VIM::kNN(newtitanic,pclass,k=1)
names(newtitanic)
VIM::kNN(newtitanic,'pclass',k=1)
tail(newtitanic)
sqrt(nrow(sleep)) #Determining K for the sleep dataset.
sqrt(nrow(newtitanic))
VIM::kNN(newtitanic,'pclass',k=36)
tail(newtitanic)
nrow(titanic3[titanic3$pclass=='3rd'])
str(HairEyeColor)
library(dplyr)
library(ggplot2)
library(shiny)
tripadvisor = read_csv('reviews.csv')
tripadvisor$ranking = rownames(tripadvisor) # adding rankings as a new column
tripadvisor$ranking = rownames(tripadvisor) # adding rankings as a new column
tripadvisor$num_reviews = as.numeric(gsub(',','',gsub(' reviews','',tripadvisor$num_reviews))) # remove the word 'reviews' and comma in the string and convert to numeric
tripadvisor$stars = as.numeric(gsub(' of 5 bubbles','',tripadvisor$stars)) # remove unnecessary part out of column and convert to numeric
tripadvisor = read.csv('reviews.csv')
tripadvisor = read.csv('reviews.csv',stringsAsFactors = F)
setwd("~/Documents/DSA/projects/web scraping/selenium")
tripadvisor = read.csv('reviews.csv',stringsAsFactors = F)
tripadvisor$ranking = rownames(tripadvisor) # adding rankings as a new column
tripadvisor$num_reviews = as.numeric(gsub(',','',gsub(' reviews','',tripadvisor$num_reviews))) # remove the word 'reviews' and comma in the string and convert to numeric
tripadvisor$stars = as.numeric(gsub(' of 5 bubbles','',tripadvisor$stars)) # remove unnecessary part out of column and convert to numeric
tripadvisor$ranking = as.numeric(tripadvisor$ranking)
tripadvisor %>% group_by(cuisine) %>% na.omit() %>% summarize(count=n() %>% arrange(count)) %>% top_n(10) #%>% ggplot(aes(x=reorder(cuisine,-count),y=count)) + geom_col(aes(fill=cuisine))
tripadvisor %>% group_by(cuisine) %>% na.omit() %>% summarize(count=n()) %>% arrange(count) %>% top_n(10) #%>% ggplot(aes(x=reorder(cuisine,-count),y=count)) + geom_col(aes(fill=cuisine))
str(tripadvisor)
length(unique(tripadvisor$cuisine))
tripadvisor %>% group_by(cuisine) %>% na.omit() %>% summarize(count=n()) %>% arrange(count) #%>% top_n(10) #%>% ggplot(aes(x=reorder(cuisine,-count),y=count)) + geom_col(aes(fill=cuisine))
tripadvisor %>% group_by(cuisine) %>% na.omit() %>% summarize(count=n()) %>% arrange(count) %>% top_n(10)
tripadvisor %>% group_by(cuisine) %>% na.omit() %>% summarize(count=n()) %>% arrange(count) %>% head(10)
least=tripadvisor %>% group_by(cuisine) %>% na.omit() %>% summarize(count=n()) %>% arrange(count) %>% head(10)
least(inner_join(tripadvisor))
inner_join(least,tripadvisor))
inner_join(least,tripadvisor)
least=inner_join(least,tripadvisor)
least
tripadvisor %>% group_by(cuisine) %>% na.omit() %>% summarize(count=n()) %>% arrange(desc(count)) %>% top_n(10) %>% ggplot(aes(x=reorder(cuisine,-count),y=count)) + geom_col(aes(fill=cuisine))
tripadvisor$num_reviews = as.numeric(gsub(',','',gsub(' reviews','',tripadvisor$num_reviews))) # remove the word 'reviews' and comma in the string and convert to numeric
tripadvisor$stars = as.numeric(gsub(' of 5 bubbles','',tripadvisor$stars)) # remove unnecessary part out of column and convert to numeric
tripadvisor %>% group_by(cuisine) %>% na.omit() %>% summarize(count=n()) %>% arrange(desc(count)) %>% top_n(10) %>% ggplot(aes(x=reorder(cuisine,-count),y=count)) + geom_col(aes(fill=cuisine))
tripadvisor %>% group_by(cuisine, na.rm=TRUE) %>% na.omit() %>% summarize(count=n()) %>% arrange(desc(count)) %>% top_n(10) %>% ggplot(aes(x=reorder(cuisine,-count),y=count)) + geom_col(aes(fill=cuisine))
library(dplyr)
tripadvisor %>% group_by(cuisine) %>% na.omit() %>% summarize(count=n()) %>% arrange(desc(count)) %>% top_n(10) %>% ggplot(aes(x=reorder(cuisine,-count),y=count)) + geom_col(aes(fill=cuisine))
tripadvisor %>%  filter(!is.na(cuisine)) %>% group_by(cuisine) %>% summarize(count=n()) %>% arrange(desc(count)) %>% top_n(10) %>% ggplot(aes(x=reorder(cuisine,-count),y=count)) + geom_col(aes(fill=cuisine))
View(tripadvisor)
tripadvisor %>% filter(cuisine != '') %>% group_by(cuisine) %>% summarize(count=n()) %>% arrange(desc(count)) %>% top_n(10) %>% ggplot(aes(x=reorder(cuisine,-count),y=count)) + geom_col(aes(fill=cuisine))
mosaicplot(HairEyeColor, shade = TRUE)
tripadvisor %>% filter(ranking <= quantile(ranking,prob=.01)) %>% group_by(cuisine) %>% na.omit() %>%
summarize(count=n()) %>% arrange(desc(count)) %>% top_n(10) %>%
ggplot(aes(x=reorder(cuisine,-count),y=count)) + geom_col(aes(fill=cuisine))
ggplot(tripadvisor,aes(num_reviews,ranking))+geom_point()
runApp('tripadvisor')
setwd("~/Documents/DSA/projects/web scraping/selenium")
runApp('tripadvisor')
setwd("~/Documents/DSA/projects/web scraping/selenium/tripadvisor")
runApp()
runApp()
runApp()
cor(tripadvisor$num_reviews,tripadvisor$ranking)
tripadvisor$num_reviews = as.numeric(gsub(',','',gsub(' reviews','',tripadvisor$num_reviews))) # remove the word 'reviews' and comma in the string and convert to numeric
tripadvisor$stars = as.numeric(gsub(' of 5 bubbles','',tripadvisor$stars)) # remove unnecessary part out of column and convert to numeric
tripadvisor$ranking=as.numeric(tripadvisor$ranking)
cor(tripadvisor$num_reviews,tripadvisor$ranking)
median(tripadvisor$ranking)
median(tripadvisor$num_reviews)
tripadvisor$num_reviews=as.numeric(tripadvisor$num_reviews)
median(tripadvisor$num_reviews)
class(tripadvisor$num_reviews)
tripadvisor$num_reviews
summary(tripadvisor$ranking)
median(tripadvisor$ranking)
summary(tripadvisor$num_reviews)
median(tripadvisor$num_reviews)
cor(tripadvisor$ranking,tripadvisor$num_reviews,rm.na=TRUE)
cor(tripadvisor$ranking,na.omit(tripadvisor$num_reviews))
dim(temp)
runApp()
runApp()
runApp()
runApp()
runApp()
